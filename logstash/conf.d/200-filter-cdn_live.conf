filter {
  ### cdnlog
  if [type] == "cdn_live" {
    grok {
      patterns_dir    => ["/etc/logstash/patterns.d"]

      match           => [ "message", "%{IPORHOST:host} %{IP:client_ip} - - \[%{HTTPDATE:time_log}\] \"%{WORD:method} http://%{IPORHOST:hostname}%{URIPATH:url}(?:%{URIPARAM:param}|) (?:HTTP/%{NUMBER:httpversion:int})\" %{NUMBER:response:int} %{NUMBER:bytes_sent_client:float} \"(?:-|%{GREEDYDATA:referer})\" \"%{GREEDYDATA:user_agent}\" %{NUMBER:request_time_tmp:float} %{NUMBER:bytes:float} %{WORD:hitmiss} %{NUMBER:varnish_time_firstbyte:float} %{WORD:varnish_handling} (?:-|%{IPORHOST:http_x_forwarded_for})"]
    }
    if "_grokparsefailure" in [tags] {
      drop { }
    }
    grok {
      patterns_dir    => ["/etc/logstash/patterns.d"]
      match           => [ "url", "(?:/[A-Za-z0-9$.+!*'(){},~;=@#%&_\-//]*):%{WORD:streaming_channel}:([A-Za-z0-9*:\._]+)/+%{RTYPE:rtype}?(?:[A-Za-z0-9*:\_]+).%{FILETYPE:filetype}"]
      add_field       => {
        "service" => "cliptv"
        "streaming_type" => "live,all"
      }
    }
    if "_grokparsefailure" in [tags] {
      mutate {
        remove_tag => [ "_grokparsefailure" ]
        remove_field => [ "streaming_channel", "rtype", "filetype", "streaming_type"]
        add_field       => {
          "service" => "vegacdn"
        }
      }
    }
    if [client_ip] {
      vegacdn {
        ip  => "client_ip"
      }
    }
    ruby {
      code =>  "event['request_time'] = event['request_time_tmp']/1000000"
    }
    geoip {
      source => "client_ip"
      database       => "/etc/logstash/GeoLiteCity.dat"
      add_field => [ "[customer_isp]", "%{[geoip][city_name]}" ]
      add_field => [ "[country_name]", "%{[geoip][country_name]}" ]
    }
    if ![customer_isp] {
      mutate { add_field => { "customer_isp" => "default_isp" } }
    }
    date {
      match           => [ "time_log", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target          => "time_write_log"
      remove_field    => "time_log"
    }
    mutate {
      remove_field => ["[geoip][city_name]", "[geoip][continent_code]", "[geoip][country_code3]", "[geoip][timezone]", "host", "tags", "varnish_handling", "request_time_tmp", "varnish_time_firstbyte", "bytes_sent_client", "beat", "input_type", "@version", "offset", "httpversion"]
      uppercase => [ "hitmiss" ]
    }
    date {
      match            => [ "timestamp", "dd-MMM-yyyy HH:mm:ss Z" ]
    }
  }
}
